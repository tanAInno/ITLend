'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Tabs = function (_Component) {
  _inherits(Tabs, _Component);

  function Tabs() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Tabs);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Tabs.__proto__ || Object.getPrototypeOf(Tabs)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selectedTab: null
    }, _this.handleSelect = function (tab) {
      _this.setState({
        selectedTab: tab
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Tabs, [{
    key: 'findDefault',
    value: function findDefault(children) {
      if (this.defaultTab) {
        return this.defaultTab;
      }

      var firstLink = void 0;
      var firstDefaultLink = void 0;

      var traverse = function traverse(child) {
        if (!child || !child.props || firstDefaultLink) {
          return;
        }

        if (child.type.displayName === 'TabLink') {
          firstLink = firstLink || child.props.to;
          firstDefaultLink = firstDefaultLink || child.props.default && child.props.to;
        }

        _react2.default.Children.forEach(child.props.children, traverse);
      };

      _react2.default.Children.forEach(children, traverse);

      this.defaultTab = firstDefaultLink || firstLink;
      return this.defaultTab;
    }
  }, {
    key: 'transformChildren',
    value: function transformChildren(children, _ref2) {
      var _this2 = this;

      var handleSelect = _ref2.handleSelect,
          selectedTab = _ref2.selectedTab,
          activeLinkStyle = _ref2.activeLinkStyle,
          visibleTabStyle = _ref2.visibleTabStyle,
          disableInlineStyles = _ref2.disableInlineStyles,
          name = _ref2.name;

      if ((typeof children === 'undefined' ? 'undefined' : _typeof(children)) !== 'object') {
        return children;
      }

      return _react2.default.Children.map(children, function (child) {
        if (!child) {
          return child;
        }
        if (child.type.displayName === 'TabLink') {
          return _react2.default.cloneElement(child, {
            handleSelect: handleSelect,
            isActive: child.props.to === selectedTab,
            activeStyle: activeLinkStyle,
            disableInlineStyles: disableInlineStyles,
            namespace: name
          });
        }

        if (child.type.displayName === 'TabContent') {
          return _react2.default.cloneElement(child, {
            isVisible: child.props.for === selectedTab,
            visibleStyle: visibleTabStyle,
            disableInlineStyles: disableInlineStyles,
            renderActiveTabContentOnly: _this2.props.renderActiveTabContentOnly
          });
        }

        return _react2.default.cloneElement(child, {}, _this2.transformChildren(child.props && child.props.children, {
          handleSelect: handleSelect,
          selectedTab: selectedTab,
          activeLinkStyle: activeLinkStyle,
          visibleTabStyle: visibleTabStyle,
          disableInlineStyles: disableInlineStyles,
          name: name
        }));
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          handleSelectProp = _props.handleSelect,
          selectedTabProp = _props.selectedTab,
          activeLinkStyle = _props.activeLinkStyle,
          visibleTabStyle = _props.visibleTabStyle,
          disableInlineStyles = _props.disableInlineStyles,
          name = _props.name,
          renderActiveTabContentOnly = _props.renderActiveTabContentOnly,
          divProps = _objectWithoutProperties(_props, ['handleSelect', 'selectedTab', 'activeLinkStyle', 'visibleTabStyle', 'disableInlineStyles', 'name', 'renderActiveTabContentOnly']);

      var handleSelect = handleSelectProp || this.handleSelect;
      var selectedTab = selectedTabProp || this.state.selectedTab || this.findDefault(this.props.children);

      var children = this.transformChildren(this.props.children, {
        handleSelect: handleSelect,
        selectedTab: selectedTab,
        activeLinkStyle: activeLinkStyle,
        visibleTabStyle: visibleTabStyle,
        disableInlineStyles: disableInlineStyles,
        name: name
      });

      return _react2.default.createElement(
        'div',
        divProps,
        children
      );
    }
  }]);

  return Tabs;
}(_react.Component);

Tabs.propTypes = {
  name: _propTypes2.default.string,
  handleSelect: _propTypes2.default.func,
  selectedTab: _propTypes2.default.string,
  activeLinkStyle: _propTypes2.default.object,
  visibleTabStyle: _propTypes2.default.object,
  disableInlineStyles: _propTypes2.default.bool,
  renderActiveTabContentOnly: _propTypes2.default.bool
};

exports.default = Tabs;