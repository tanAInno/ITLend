import React from "react";

function _execIf(func, ...args) {
  if (typeof func === "function") {
    func(...args);
  }
}

class Panel extends React.Component {
  constructor(props) {
    super(props);
    this.ticking = null;
    this.handleScroll = this.handleScroll.bind(this);
    this.throttleScroll = this.throttleScroll.bind(this);
    this.handleRef = this.handleRef.bind(this);
  }

  visible(node, panel) {
    const panelCoords = panel.getBoundingClientRect();
    const nodeCoords = node.getBoundingClientRect();
    return nodeCoords.top >= panelCoords.top && nodeCoords.bottom <= panelCoords.bottom;
  }

  handleScroll(evt) {
    const nodes = this.panel.childNodes;
    const visibleList = [];
    for (let i = 0; i < nodes.length; i++) {
      if (this.visible(nodes[i], this.panel)) {
        visibleList.push({ node: nodes[i], index: i });
      }
    }
    _execIf(this.props.onScroll, evt, visibleList);
  }

  throttleScroll(evt) {
    clearTimeout(this.ticking);
    this.ticking = setTimeout(() => {
      this.handleScroll(evt);
    }, 66);
  }

  handleRef(evt) {
    this.panel = evt;
    _execIf(this.props.onRef, evt);
  }

  render() {
    const { children, onScroll, onRef, ...extra } = this.props;
    return (
      <div {...extra} ref={this.handleRef} onScroll={this.throttleScroll}>
        {children}
      </div>
    );
  }
}

export default Panel;
