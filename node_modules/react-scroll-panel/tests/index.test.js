import "raf/polyfill";
import React from "react";
import ReactDOM from "react-dom";
import { mount, shallow, configure } from "enzyme";
import Adapter from 'enzyme-adapter-react-16';
import Panel from "../index";

configure({ adapter: new Adapter() });

describe("Panel", () => {
  it("renders without crashing", () => {
    ReactDOM.render(<Panel />, document.createElement("div"));
  });

  it("renders one div element and three p elements", () => {
    const wrapper = shallow(<Panel><p></p><p></p><p></p></Panel>);
    expect(wrapper.find('div')).toHaveLength(1);
    expect(wrapper.find('p')).toHaveLength(3);
  });

  it("call onRef and onScroll methods", () => {
    const onRefMock = jest.fn();
    const onScrollMock = jest.fn();
    const wrapper = mount(<Panel onRef={onRefMock} onScroll={onScrollMock} />);
    wrapper.find('Panel').instance().handleScroll();
    expect(onRefMock.mock.calls[0][0]).toBe(wrapper.find('div').getDOMNode());
    setTimeout(() => {
      expect(onScrollMock.mock.calls.length).toBe(1);
    }, 500)
  });

  it("fire scrolling event", () => {
    const onScrollMock = jest.fn();
    const items = [];
    Array.from(new Array(50), (val, index) => {
      items.push(<p key={index}>{val}</p>);
    });

    const wrapper = mount(<Panel onScroll={onScrollMock}>{items}</Panel>);
    wrapper.find('div').getDOMNode().scrollTop = 50;
    setTimeout(() => {
      expect(onScrollMock.mock.calls[0][1].length).toBeGreaterThan(2);
    }, 500);
  });
});
